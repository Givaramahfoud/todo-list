{"version":3,"sources":["logo.svg","components/Item.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Item","props","items","map","item","id","key","Todo","handelChange","e","setState","newItem","target","value","handelSubmit","event","preventDefault","state","trim","prevState","concat","this","onSubmit","className","type","onChange","Component","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,kC,yNCE5B,SAASC,EAAKC,GACzB,OACI,4BACKA,EAAMC,MAAMC,KACT,SAACC,EAAMC,GAAP,OAAc,wBAAIC,IAAKD,GAAKD,O,ICHvBG,E,YACjB,aAAe,IAAD,8BACV,+CAOJC,aAAe,SAACC,GACZ,EAAKC,SAAS,CAAEC,QAASF,EAAEG,OAAOC,SATxB,EAWdC,aAAe,SAACC,GACZA,EAAMC,iBACN,IAAML,EAAU,EAAKM,MAAMN,QAAQO,QACnB,KAAZP,GAAkBA,IAClB,EAAKD,UAAS,SAAAS,GAAS,MAAK,CAAEjB,MAAOiB,EAAUjB,MAAMkB,OAAOT,GAAUA,QAAS,QAbnF,EAAKM,MAAQ,CACTN,QAAS,GACTT,MAAO,IAJD,E,sEAmBV,OACI,6BACI,4CACA,kBAACF,EAAD,CAAME,MAAOmB,KAAKJ,MAAMf,QACxB,sDACA,0BAAMoB,SAAUD,KAAKP,aAAcS,UAAU,aACzC,2BAAOC,KAAK,OAAOnB,GAAG,OAAOQ,MAAOQ,KAAKJ,MAAMN,QAASc,SAAUJ,KAAKb,eACvE,6C,GA3BckB,aCanBC,MAXf,WACE,OACE,yBAAKJ,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKK,IAAKC,IAAMN,UAAU,WAAWO,IAAI,SACzC,kBAAC,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.caab72a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nexport default function Item(props) {\n    return (\n        <ul>\n            {props.items.map(\n                (item, id) => <li key={id}>{item}</li>\n            )}\n        </ul>\n    )\n}\n","import React, { Component } from 'react'\nimport Item from './Item';\n\nexport default class Todo extends Component {\n    constructor() {\n        super()\n        this.state = {\n            newItem: '',\n            items: []\n        }\n    }\n\n    handelChange = (e) => {\n        this.setState({ newItem: e.target.value });\n    }\n    handelSubmit = (event) => {\n        event.preventDefault()\n        const newItem = this.state.newItem.trim()\n        if (newItem !== \"\" || newItem)\n            this.setState(prevState => ({ items: prevState.items.concat(newItem), newItem: '' }))\n\n    }\n    render() {\n        return (\n            <div>\n                <h3>Todo List : </h3>\n                <Item items={this.state.items} />\n                <p> A list of things to do</p>\n                <form onSubmit={this.handelSubmit} className='addToForm'>\n                    <input type=\"text\" id='todo' value={this.state.newItem} onChange={this.handelChange} />\n                    <button >Add</button>\n                </form>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Todo from './components/Todo'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Todo />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}